{"version":3,"sources":["TimePicker.tsx"],"names":["TimePicker","hours","minutes","onFocusInput","focused","inputType","onChange","locale","dimensions","isLandscape","width","height","is24Hour","React","useMemo","formatter","Intl","DateTimeFormat","hour","minute","timeZone","formatted","format","Date","UTC","includes","onInnerChange","useCallback","params","styles","rootLandscape","rootPortrait","inputTypes","picker","clockContainer","StyleSheet","create","flexDirection","alignItems","justifyContent","circleSize","paddingTop","paddingLeft","paddingRight","memo"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet, useWindowDimensions } from 'react-native'\n\nimport {\n  inputTypes,\n  PossibleClockTypes,\n  PossibleInputTypes,\n  toHourInputFormat,\n  toHourOutputFormat,\n} from './timeUtils'\n\nimport AnalogClock from './AnalogClock'\nimport { circleSize } from './timeUtils'\nimport TimeInputs from './TimeInputs'\n\ntype onChangeFunc = ({\n  hours,\n  minutes,\n  focused,\n}: {\n  hours: number\n  minutes: number\n  focused?: undefined | PossibleClockTypes\n}) => any\n\nfunction TimePicker({\n  hours,\n  minutes,\n  onFocusInput,\n  focused,\n  inputType,\n  onChange,\n  locale,\n}: {\n  locale?: undefined | string\n  inputType: PossibleInputTypes\n  focused: PossibleClockTypes\n  hours: number\n  minutes: number\n  onFocusInput: (type: PossibleClockTypes) => any\n  onChange: onChangeFunc\n}) {\n  const dimensions = useWindowDimensions()\n  const isLandscape = dimensions.width > dimensions.height\n\n  // method to check whether we have 24 hours in clock or 12\n  const is24Hour = React.useMemo(() => {\n    const formatter = new Intl.DateTimeFormat(locale, {\n      hour: '2-digit',\n      minute: '2-digit',\n      timeZone: 'UTC',\n    })\n    const formatted = formatter.format(new Date(Date.UTC(2020, 1, 1, 23)))\n    return formatted.includes('23')\n  }, [locale])\n\n  const onInnerChange = React.useCallback<onChangeFunc>(\n    (params) => {\n      params.hours = toHourOutputFormat(params.hours, hours, is24Hour)\n      onChange(params)\n    },\n    [onChange, hours, is24Hour]\n  )\n\n  return (\n    <View style={isLandscape ? styles.rootLandscape : styles.rootPortrait}>\n      <TimeInputs\n        inputType={inputType}\n        hours={hours}\n        minutes={minutes}\n        is24Hour={is24Hour}\n        onChange={onChange}\n        onFocusInput={onFocusInput}\n        focused={focused}\n      />\n      {inputType === inputTypes.picker ? (\n        <View style={styles.clockContainer}>\n          <AnalogClock\n            hours={toHourInputFormat(hours, is24Hour)}\n            minutes={minutes}\n            focused={focused}\n            is24Hour={is24Hour}\n            onChange={onInnerChange}\n          />\n        </View>\n      ) : null}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  rootLandscape: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: 24 * 3 + 96 * 2 + 52 + circleSize,\n  },\n  rootPortrait: {},\n  clockContainer: { paddingTop: 36, paddingLeft: 12, paddingRight: 12 },\n})\n\nexport default React.memo(TimePicker)\n"]}