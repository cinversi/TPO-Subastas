{"version":3,"sources":["AnalogClockHours.tsx"],"names":["AnalogClockHours","is24Hour","hours","outerRange","getHourNumbers","circleSize","innerRange","color","map","a","i","styles","outerHourRoot","top","left","outerHourInner","innerHourRoot","innerHourInner","innerHourText","StyleSheet","create","position","justifyContent","alignItems","zIndex","width","height","marginLeft","marginTop","borderRadius","fontSize","size","count","angle","step","Math","PI","radius","Array","fill","x","round","cos","y","sin","React","memo"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text } from 'react-native-paper'\nimport { circleSize } from './timeUtils'\nimport { useTextColorOnPrimary } from '../utils'\n\nfunction AnalogClockHours({\n  is24Hour,\n  hours,\n}: {\n  is24Hour: boolean\n  hours: number\n}) {\n  const outerRange = getHourNumbers(false, circleSize, 12)\n  const innerRange = getHourNumbers(true, circleSize, 12)\n  const color = useTextColorOnPrimary()\n  return (\n    <>\n      {outerRange.map((a, i) => (\n        <View\n          key={i}\n          pointerEvents=\"none\"\n          style={[\n            styles.outerHourRoot,\n            {\n              top: a[1] || 0,\n              left: a[0] || 0,\n            },\n          ]}\n        >\n          <View style={styles.outerHourInner}>\n            <Text style={hours === i + 1 ? { color } : null} selectable={false}>\n              {i + 1}\n            </Text>\n          </View>\n        </View>\n      ))}\n      {is24Hour\n        ? innerRange.map((a, i) => (\n            <View\n              key={i}\n              pointerEvents=\"none\"\n              style={[\n                styles.innerHourRoot,\n                {\n                  top: a[1] || 0,\n                  left: a[0] || 0,\n                },\n              ]}\n            >\n              <View style={styles.innerHourInner}>\n                <Text\n                  selectable={false}\n                  style={[\n                    styles.innerHourText,\n                    i + 13 === hours || (i + 13 === 24 && hours === 0)\n                      ? { color }\n                      : null,\n                  ]}\n                >\n                  {i + 13 === 24 ? '00' : i + 13}\n                </Text>\n              </View>\n            </View>\n          ))\n        : null}\n    </>\n  )\n}\n\nconst styles = StyleSheet.create({\n  outerHourRoot: {\n    position: 'absolute',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 20,\n    width: 50,\n    height: 50,\n    marginLeft: -25,\n    marginTop: -25,\n\n    borderRadius: 25,\n  },\n  outerHourInner: { borderRadius: 25 },\n  innerHourRoot: {\n    position: 'absolute',\n    zIndex: 20,\n    justifyContent: 'center',\n    alignItems: 'center',\n    width: 40,\n    height: 40,\n    marginLeft: -20,\n    marginTop: -20,\n    borderRadius: 20,\n  },\n  innerHourInner: { borderRadius: 20 },\n  innerHourText: { fontSize: 13 },\n})\n\nfunction getHourNumbers(is24Hour: boolean, size: number, count: number) {\n  let angle = 0\n  let step = (2 * Math.PI) / count\n  let radius = size / (is24Hour ? 4 : 2.5)\n\n  angle = (-90 * Math.PI) / 180 + Math.PI / 6\n\n  return Array(12)\n    .fill(true)\n    .map(() => {\n      let x = Math.round(size / 2 + radius * Math.cos(angle))\n      let y = Math.round(size / 2 + radius * Math.sin(angle))\n      angle += step\n      return [x, y]\n    })\n}\n\nexport default React.memo(AnalogClockHours)\n"]}