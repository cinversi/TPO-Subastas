{"version":3,"sources":["AmPmSwitcher.tsx"],"names":["AmPmSwitcher","hours","onChange","theme","backgroundColor","dark","colors","surface","lighten","hex","darken","hourType","isAM","hourTypes","am","isPM","pm","styles","root","borderColor","borderRadius","roundness","undefined","switchSeparator","SwitchButton","label","onPress","selected","disabled","color","switchButton","switchButtonInner","fonts","medium","StyleSheet","create","width","height","borderWidth","overflow","flex","alignItems","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { View, StyleSheet } from 'react-native'\nimport { Text, TouchableRipple, useTheme } from 'react-native-paper'\nimport { useMemo } from 'react'\nimport Color from 'color'\nimport { getHourType, hourTypes, useSwitchColors } from './timeUtils'\n\nexport default function AmPmSwitcher({\n  hours,\n  onChange,\n}: {\n  hours: number\n  onChange: (hours: number) => any\n}) {\n  const theme = useTheme()\n  const backgroundColor = useMemo<string>(() => {\n    if (theme.dark) {\n      return Color(theme.colors.surface).lighten(1.2).hex()\n    }\n    return Color(theme.colors.surface).darken(0.1).hex()\n  }, [theme])\n\n  const hourType = getHourType(hours)\n  const isAM = hourType === hourTypes.am\n  const isPM = hourType === hourTypes.pm\n\n  return (\n    <View\n      style={[\n        styles.root,\n        {\n          borderColor: backgroundColor,\n          borderRadius: theme.roundness,\n        },\n      ]}\n    >\n      <SwitchButton\n        label=\"AM\"\n        onPress={isAM ? undefined : () => onChange(hours - 12)}\n        selected={isAM}\n        disabled={isAM}\n      />\n      <View style={[styles.switchSeparator, { backgroundColor }]} />\n      <SwitchButton\n        label=\"PM\"\n        onPress={isPM ? undefined : () => onChange(hours + 12)}\n        selected={isPM}\n        disabled={isPM}\n      />\n    </View>\n  )\n}\n\nfunction SwitchButton({\n  label,\n  onPress,\n  selected,\n  disabled,\n}: {\n  label: string\n  onPress: (() => any) | undefined\n  selected: boolean\n  disabled: boolean\n}) {\n  const theme = useTheme()\n  const { backgroundColor, color } = useSwitchColors(selected)\n\n  return (\n    <TouchableRipple\n      onPress={onPress}\n      style={styles.switchButton}\n      accessibilityLabel={label}\n      // @ts-ignore old React Native versions\n      accessibilityTraits={disabled ? ['button', 'disabled'] : 'button'}\n      // @ts-ignore old React Native versions\n      accessibilityComponentType=\"button\"\n      accessibilityRole=\"button\"\n      accessibilityState={{ disabled }}\n      disabled={disabled}\n    >\n      <View style={[styles.switchButtonInner, { backgroundColor }]}>\n        <Text\n          selectable={false}\n          style={[\n            {\n              ...theme.fonts.medium,\n              color: color,\n            },\n          ]}\n        >\n          {label}\n        </Text>\n      </View>\n    </TouchableRipple>\n  )\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    width: 50,\n    height: 80,\n    borderWidth: 1,\n    overflow: 'hidden',\n  },\n  switchSeparator: {\n    height: 1,\n    width: 48,\n  },\n  switchButton: {\n    flex: 1,\n  },\n  switchButtonInner: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n"]}