{"version":3,"sources":["utils.ts"],"names":["useLatest","value","valueRef","React","useRef","useEffect","current","useHeaderBackgroundColor","theme","dark","mode","colors","surface","primary","useHeaderColorIsLight","background","isLight","useHeaderTextColor","useTextColorOnPrimary","isDark","range","start","end","Array","fill","map","_","i"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;AAEO,SAASA,SAAT,CAAsBC,KAAtB,EAAgC;AACrC,QAAMC,QAAQ,GAAGC,KAAK,CAACC,MAAN,CAAgBH,KAAhB,CAAjB;AACAE,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpBH,IAAAA,QAAQ,CAACI,OAAT,GAAmBL,KAAnB;AACD,GAFD,EAEG,CAACA,KAAD,CAFH;AAGA,SAAOC,QAAP;AACD;;AAEM,SAASK,wBAAT,GAAoC;AACzC,QAAMC,KAAK,GAAG,iCAAd;AACA,SAAOA,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACE,IAAN,KAAe,UAA7B,GACH,+BAAQ,CAAR,EAAWF,KAAK,CAACG,MAAN,CAAaC,OAAxB,CADG,GAEHJ,KAAK,CAACG,MAAN,CAAaE,OAFjB;AAGD;;AAEM,SAASC,qBAAT,GAAiC;AACtC,QAAMN,KAAK,GAAG,iCAAd;AACA,QAAMO,UAAU,GACdP,KAAK,CAACC,IAAN,IAAcD,KAAK,CAACE,IAAN,KAAe,UAA7B,GACIF,KAAK,CAACG,MAAN,CAAaC,OADjB,GAEIJ,KAAK,CAACG,MAAN,CAAaE,OAHnB;AAIA,SAAO,oBAAME,UAAN,EAAkBC,OAAlB,EAAP;AACD;;AAEM,SAASC,kBAAT,GAA8B;AACnC,QAAMD,OAAO,GAAGF,qBAAqB,EAArC;AACA,SAAO,CAACE,OAAD,GAAW,MAAX,GAAoB,MAA3B;AACD;;AAEM,SAASE,qBAAT,GAAiC;AACtC,QAAMV,KAAK,GAAG,iCAAd;AACA,QAAMW,MAAM,GAAG,CAAC,oBAAMX,KAAK,CAACG,MAAN,CAAaE,OAAnB,EAA4BG,OAA5B,EAAhB;AACA,SAAOG,MAAM,GAAG,MAAH,GAAY,MAAzB;AACD;;AAEM,SAASC,KAAT,CAAeC,KAAf,EAA8BC,GAA9B,EAA2C;AAChD,SAAOC,KAAK,CAACD,GAAG,GAAGD,KAAN,GAAc,CAAf,CAAL,CACJG,IADI,CACC,IADD,EAEJC,GAFI,CAEA,CAACC,CAAD,EAAIC,CAAJ,KAAUN,KAAK,GAAGM,CAFlB,CAAP;AAGD","sourcesContent":["import * as React from 'react'\nimport { overlay, useTheme } from 'react-native-paper'\nimport Color from 'color'\n\nexport function useLatest<T>(value: T) {\n  const valueRef = React.useRef<T>(value)\n  React.useEffect(() => {\n    valueRef.current = value\n  }, [value])\n  return valueRef\n}\n\nexport function useHeaderBackgroundColor() {\n  const theme = useTheme()\n  return theme.dark && theme.mode === 'adaptive'\n    ? overlay(4, theme.colors.surface)\n    : theme.colors.primary\n}\n\nexport function useHeaderColorIsLight() {\n  const theme = useTheme()\n  const background =\n    theme.dark && theme.mode === 'adaptive'\n      ? theme.colors.surface\n      : theme.colors.primary\n  return Color(background).isLight()\n}\n\nexport function useHeaderTextColor() {\n  const isLight = useHeaderColorIsLight()\n  return !isLight ? '#fff' : '#000'\n}\n\nexport function useTextColorOnPrimary() {\n  const theme = useTheme()\n  const isDark = !Color(theme.colors.primary).isLight()\n  return isDark ? '#fff' : '#000'\n}\n\nexport function range(start: number, end: number) {\n  return Array(end - start + 1)\n    .fill(null)\n    .map((_, i) => start + i)\n}\n"]}