"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var React = _interopRequireWildcard(require("react"));

var _reactNative = require("react-native");

var _TextInputMask = _interopRequireDefault(require("../TextInputMask"));

var _reactNativePaper = require("react-native-paper");

var _dateUtils = require("./dateUtils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function CalendarEdit({
  mode,
  state,
  label = '',
  startLabel = 'Start',
  endLabel = 'End',
  collapsed,
  onChange,
  validRange,
  locale
}) {
  const dateInput = React.useRef(null);
  const startInput = React.useRef(null);
  const endInput = React.useRef(null); // when switching views focus, or un-focus text input

  React.useEffect(() => {
    // hide open keyboard
    if (collapsed) {
      _reactNative.Keyboard.dismiss();
    }

    const inputsToFocus = [dateInput.current, startInput.current].filter(n => n);
    const inputsToBlur = [dateInput.current, startInput.current, endInput.current].filter(n => n);

    if (collapsed) {
      inputsToBlur.forEach(ip => ip.blur());
    } else {
      inputsToFocus.forEach(ip => ip.focus());
    }
  }, [mode, startInput, endInput, dateInput, collapsed]);
  const onSubmitStartInput = React.useCallback(() => {
    if (endInput.current) {
      endInput.current.focus();
    }
  }, [endInput]);
  const onSubmitEndInput = React.useCallback(() => {// TODO: close modal and persist range
  }, []);
  const onSubmitInput = React.useCallback(() => {// TODO: close modal and persist range
  }, []);
  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.root
  }, /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.inner
  }, mode === 'single' ? /*#__PURE__*/React.createElement(CalendarInput, {
    ref: dateInput,
    label: label,
    value: state.date,
    onChange: date => onChange({ ...state,
      date
    }),
    onSubmitEditing: onSubmitInput,
    validRange: validRange,
    locale: locale
  }) : null, mode === 'range' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CalendarInput, {
    ref: startInput,
    label: startLabel,
    value: state.startDate,
    onChange: startDate => onChange({ ...state,
      startDate
    }),
    returnKeyType: 'next',
    onSubmitEditing: onSubmitStartInput,
    validRange: validRange,
    locale: locale
  }), /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.separator
  }), /*#__PURE__*/React.createElement(CalendarInput, {
    ref: endInput,
    label: endLabel,
    value: state.endDate,
    onChange: endDate => onChange({ ...state,
      endDate
    }),
    isEndDate: true,
    onSubmitEditing: onSubmitEndInput,
    validRange: validRange,
    locale: locale
  })) : null));
}

function CalendarInputPure({
  label,
  value,
  onChange,
  isEndDate,
  returnKeyType,
  onSubmitEditing,
  locale,
  validRange
}, ref) {
  const theme = (0, _reactNativePaper.useTheme)();
  const [error, setError] = React.useState(null);
  const formatter = React.useMemo(() => {
    return new Intl.DateTimeFormat(locale, {
      month: '2-digit',
      day: '2-digit',
      year: 'numeric'
    });
  }, [locale]);
  const inputFormat = React.useMemo(() => {
    // TODO: something cleaner and more universal?
    const inputDate = formatter.format(new Date(2020, 10 - 1, 1));
    return inputDate.replace('2020', 'YYYY').replace('10', 'MM').replace('01', 'DD');
  }, [formatter]);
  const formattedValue = formatter.format(value);

  const onChangeText = date => {
    const dayIndex = inputFormat.indexOf('DD');
    const monthIndex = inputFormat.indexOf('MM');
    const yearIndex = inputFormat.indexOf('YYYY');
    const day = Number(date.slice(dayIndex, dayIndex + 2));
    const year = Number(date.slice(yearIndex, yearIndex + 4));
    const month = Number(date.slice(monthIndex, monthIndex + 2));

    if (Number.isNaN(day) || Number.isNaN(year) || Number.isNaN(month)) {
      setError(inputFormat);
      return;
    }

    const finalDate = isEndDate ? new Date(year, month - 1, day, 23, 59, 59) : new Date(year, month - 1, day);
    const validStart = validRange === null || validRange === void 0 ? void 0 : validRange.startDate;
    const validEnd = validRange === null || validRange === void 0 ? void 0 : validRange.endDate;

    if (!(0, _dateUtils.isDateWithinOptionalRange)(finalDate, {
      startUnix: validStart ? (0, _dateUtils.dateToUnix)(validStart) : undefined,
      endUnix: validEnd ? (0, _dateUtils.dateToUnix)(validEnd) : undefined
    })) {
      let errors = validStart && validEnd ? [`${formatter.format(validStart)} - ${formatter.format(validEnd)}`] : [validStart ? `> ${formatter.format(validStart)}` : '', validEnd ? `< ${formatter.format(validEnd)}` : ''];
      setError(errors.filter(n => n).join(' '));
      return;
    }

    setError(null);

    if (isEndDate) {
      onChange(finalDate);
    } else {
      onChange(finalDate);
    }
  };

  return /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.inputContainer
  }, /*#__PURE__*/React.createElement(_TextInputMask.default, {
    ref: ref,
    value: formattedValue,
    style: styles.input,
    label: `${label} (${inputFormat})`,
    keyboardType: 'number-pad',
    placeholder: inputFormat,
    mask: inputFormat,
    onChangeText: onChangeText,
    returnKeyType: returnKeyType,
    onSubmitEditing: onSubmitEditing,
    keyboardAppearance: theme.dark ? 'dark' : 'default',
    error: !!error
  }), /*#__PURE__*/React.createElement(_reactNativePaper.HelperText, {
    type: "error",
    visible: !!error
  }, error));
}

const CalendarInput = /*#__PURE__*/React.forwardRef(CalendarInputPure);

const styles = _reactNative.StyleSheet.create({
  root: {
    padding: 12
  },
  inner: {
    flexDirection: 'row'
  },
  inputContainer: {
    flex: 1
  },
  input: {
    flex: 1
  },
  separator: {
    width: 12
  }
});

var _default = /*#__PURE__*/React.memo(CalendarEdit);

exports.default = _default;
//# sourceMappingURL=CalendarEdit.js.map