{"version":3,"sources":["dateUtils.tsx"],"names":["showWeekDay","dayIndex","disableWeekDays","some","di","dateToUnix","d","Math","round","getTime","addMonths","date","count","n","getDate","n2","Date","setDate","setMonth","getMonth","min","getDaysInMonth","year","getFullYear","month","isLeapYear","getFirstDayOfMonth","getDay","areDatesOnSameDay","a","b","isDateBetween","startDate","endDate","isDateWithinOptionalRange","startUnix","endUnix","dateUnix","daySize","estimatedMonthHeight","startAtIndex","totalMonths","beginOffset","gridCounts","Array","getGridCount","index","cHeight","monthDate","getRealIndex","h","getGridCountForDate","daysInMonth","dayOfWeek","ceil","getInitialIndex","today","months","differenceInMonths","firstDate","secondDate","diffMonths"],"mappings":"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","sourcesContent":["export type DisableWeekDaysType = number[]\n\nexport function showWeekDay(\n  dayIndex: number,\n  disableWeekDays?: DisableWeekDaysType\n): boolean {\n  return !(disableWeekDays && disableWeekDays.some((di) => di === dayIndex))\n}\n\nexport function dateToUnix(d: Date): number {\n  return Math.round(d.getTime() / 1000)\n}\n\nexport function addMonths(date: Date, count: number) {\n  let n = date.getDate()\n  let n2 = new Date(date.getTime())\n  n2.setDate(1)\n  n2.setMonth(n2.getMonth() + count)\n  n2.setDate(\n    Math.min(\n      n,\n      getDaysInMonth({ year: n2.getFullYear(), month: n2.getMonth() })\n    )\n  )\n\n  return n2\n}\n\n// https://stackoverflow.com/a/1185068/2508481\n// pass in any date as parameter anyDateInMonth based on dayjs\nexport function getDaysInMonth({\n  year,\n  month,\n}: {\n  year: number\n  month: number\n}): number {\n  return [\n    31,\n    isLeapYear({ year }) ? 29 : 28,\n    31,\n    30,\n    31,\n    30,\n    31,\n    31,\n    30,\n    31,\n    30,\n    31,\n  ][month]\n}\n\nexport function getFirstDayOfMonth({\n  year,\n  month,\n}: {\n  year: number\n  month: number\n}): number {\n  return new Date(year, month, 1).getDay()\n}\n\n// export function getLastDayOfMonth({\n//   year,\n//   month,\n// }: {\n//   year: number\n//   month: number\n// }): number {\n//   return new Date(year, month, getDaysInMonth({ year, month })).getDay()\n// }\n\nexport function areDatesOnSameDay(a: Date, b?: Date | null | undefined) {\n  if (!b) {\n    return false\n  }\n\n  return (\n    a.getFullYear() === b.getFullYear() &&\n    a.getMonth() === b.getMonth() &&\n    a.getDate() === b.getDate()\n  )\n}\n\nexport function isDateBetween(\n  date: Date,\n  {\n    startDate,\n    endDate,\n  }: {\n    startDate?: Date | null | undefined\n    endDate?: Date | null | undefined\n  }\n): boolean {\n  if (!startDate || !endDate) {\n    return false\n  }\n  return date <= endDate && date >= startDate\n}\n\n/**\n * Check if a date is within an optional range.\n *\n * If the range doesn't exist, it defaults to `true`.\n */\nexport function isDateWithinOptionalRange(\n  date: Date,\n  {\n    startUnix,\n    endUnix,\n  }: { startUnix: number | undefined; endUnix: number | undefined }\n) {\n  const dateUnix = dateToUnix(date)\n  // if startUnix is provided and date is before start\n  if (startUnix && dateUnix < startUnix) {\n    return false\n  }\n\n  // if endUnix is provided and date is after end\n  if (endUnix && dateUnix > endUnix) {\n    return false\n  }\n\n  return true\n}\n\nexport function isLeapYear({ year }: { year: number }) {\n  return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0\n}\n\nexport const daySize = 46\nexport const estimatedMonthHeight = 360\nexport const startAtIndex = 1200\nexport const totalMonths = startAtIndex * 2\nexport const beginOffset = estimatedMonthHeight * startAtIndex\nexport const gridCounts = new Array<number | undefined>(totalMonths)\n\nexport function getGridCount(index: number) {\n  const cHeight = gridCounts[index]\n  if (cHeight) {\n    return cHeight\n  }\n  const monthDate = addMonths(new Date(), getRealIndex(index))\n  const h = getGridCountForDate(monthDate)\n  gridCounts[index] = h\n  return h\n}\n\nexport function getGridCountForDate(date: Date) {\n  const year = date.getFullYear()\n  const month = date.getMonth()\n  const daysInMonth = getDaysInMonth({ year, month })\n  const dayOfWeek = getFirstDayOfMonth({ year, month })\n  return Math.ceil((daysInMonth + dayOfWeek) / 7)\n}\n\nexport function getRealIndex(index: number) {\n  return index - startAtIndex\n}\n\nexport function getInitialIndex(date: Date | undefined) {\n  if (!date) {\n    return startAtIndex\n  }\n\n  const today = new Date()\n  const months = differenceInMonths(today, date)\n\n  return startAtIndex + months\n}\n\nexport function differenceInMonths(firstDate: Date, secondDate: Date) {\n  let diffMonths = (secondDate.getFullYear() - firstDate.getFullYear()) * 12\n  diffMonths -= firstDate.getMonth()\n  diffMonths += secondDate.getMonth()\n  return diffMonths\n}\n"]}