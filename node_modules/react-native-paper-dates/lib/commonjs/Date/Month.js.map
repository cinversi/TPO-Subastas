{"version":3,"sources":["Month.tsx"],"names":["Month","props","index","mode","date","dates","startDate","endDate","onPressYear","selectingYear","onPressDate","scrollMode","primaryColor","selectColor","roundness","disableWeekDays","locale","validRange","theme","textColorOnPrimary","realIndex","isHorizontal","validRangeStart","Date","getFullYear","getMonth","getDate","undefined","validRangeEnd","monthName","month","year","React","useMemo","md","y","m","formatter","Intl","DateTimeFormat","format","grid","today","daysInMonth","dayOfWeek","emptyDays","monthGrid","map","days","weekGrid","weekIndex","generatedDays","_","dayIndex","isFirstWeek","realDayIndex","beforeWeekDay","dayOfMonth","afterWeekDay","day","isToday","inRange","disabled","selected","leftCrop","rightCrop","isFirstDayOfMonth","isLastDayOfMonth","selectedStartDay","selectedEndDay","safeDates","some","d","yesterday","tomorrow","yesterdaySelected","tomorrowSelected","isWithinOptionalValidRange","startUnix","endUnix","styles","height","getMonthHeight","monthHeader","marginTop","monthHeaderSingleMarginTop","marginBottom","monthHeaderSingleMarginBottom","yearButton","borderRadius","yearButtonInner","monthLabel","fonts","medium","opacity1","opacity0","week","filter","gd","weekMargin","weekSize","daySize","montHeaderHeight","monthHeaderSingleHeight","StyleSheet","create","flexDirection","justifyContent","overflow","fontSize","opacity","alignSelf","marginLeft","paddingLeft","alignItems","Array","fill","getIndexCount","startAtIndex","weeksOffset","off","i","cIndex","gridCounts","getIndexFromHorizontalOffset","offset","width","Math","floor","getIndexFromVerticalOffset","estimatedIndex","ceil","estimatedMonthHeight","realOffset","getVerticalMonthsOffset","difference","beginOffset","getHorizontalMonthOffset","count","ob","monthsHeight","c","dayNamesHeight","calendarHeight","gc","currentMonthHeight","extraHeight","memo"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { StyleSheet, View } from 'react-native'\nimport { IconButton, Text, useTheme, TouchableRipple } from 'react-native-paper'\nimport Day, { EmptyDay } from './Day'\n\nimport {\n  addMonths,\n  areDatesOnSameDay,\n  daySize,\n  DisableWeekDaysType,\n  getDaysInMonth,\n  getFirstDayOfMonth,\n  getRealIndex,\n  getGridCount,\n  isDateBetween,\n  gridCounts,\n  showWeekDay,\n  startAtIndex,\n  beginOffset,\n  estimatedMonthHeight,\n  isDateWithinOptionalRange,\n  dateToUnix,\n} from './dateUtils'\nimport { getCalendarHeaderHeight } from './CalendarHeader'\nimport type {\n  CalendarDate,\n  CalendarDates,\n  ModeType,\n  ValidRangeType,\n} from './Calendar'\nimport { dayNamesHeight } from './DayNames'\nimport { useTextColorOnPrimary } from '../utils'\n\ninterface BaseMonthProps {\n  locale: undefined | string\n  scrollMode: 'horizontal' | 'vertical'\n  disableWeekDays?: DisableWeekDaysType\n  mode: ModeType\n  index: number\n  onPressYear: (year: number) => any\n  selectingYear: boolean\n  onPressDate: (date: Date) => any\n  primaryColor: string\n  selectColor: string\n  roundness: number\n  validRange?: ValidRangeType\n\n  // some of these should be required in final implementation\n  startDate?: CalendarDate\n  endDate?: CalendarDate\n  date?: CalendarDate\n  dates?: CalendarDates\n}\n\ninterface MonthRangeProps extends BaseMonthProps {\n  mode: 'range'\n  startDate: CalendarDate\n  endDate: CalendarDate\n}\n\ninterface MonthSingleProps extends BaseMonthProps {\n  mode: 'single'\n  date: CalendarDate\n}\n\ninterface MonthMultiProps extends BaseMonthProps {\n  mode: 'multiple'\n  dates: CalendarDates\n}\n\nfunction Month(props: MonthSingleProps | MonthRangeProps | MonthMultiProps) {\n  const {\n    index,\n    mode,\n    date,\n    dates,\n    startDate,\n    endDate,\n    onPressYear,\n    selectingYear,\n    onPressDate,\n    scrollMode,\n    primaryColor,\n    selectColor,\n    roundness,\n    disableWeekDays,\n    locale,\n    validRange,\n  } = props\n  const theme = useTheme()\n  const textColorOnPrimary = useTextColorOnPrimary()\n  const realIndex = getRealIndex(index)\n  const isHorizontal = scrollMode === 'horizontal'\n\n  const validRangeStart =\n    validRange?.startDate instanceof Date\n      ? dateToUnix(\n          new Date(\n            validRange?.startDate.getFullYear(),\n            validRange?.startDate.getMonth(),\n            validRange?.startDate.getDate(),\n            0,\n            0,\n            0\n          )\n        )\n      : undefined\n\n  const validRangeEnd =\n    validRange?.endDate instanceof Date\n      ? dateToUnix(\n          new Date(\n            validRange?.endDate.getFullYear(),\n            validRange?.endDate.getMonth(),\n            validRange?.endDate.getDate(),\n            23,\n            59,\n            59\n          )\n        )\n      : undefined\n\n  const { monthName, month, year } = React.useMemo(() => {\n    const md = addMonths(new Date(), realIndex)\n    const y = md.getFullYear()\n    const m = md.getMonth()\n    const formatter = new Intl.DateTimeFormat(locale, {\n      month: 'long',\n    })\n    return { monthName: formatter.format(md), month: m, year: y }\n  }, [realIndex, locale])\n\n  const grid = React.useMemo(() => {\n    const today = new Date()\n\n    const daysInMonth = getDaysInMonth({ year, month })\n    const dayOfWeek = getFirstDayOfMonth({ year, month })\n    const emptyDays = dayOfWeek\n\n    return monthGrid(index).map(({ days, weekGrid }) => {\n      return {\n        weekIndex: weekGrid,\n        generatedDays: days.map((_, dayIndex) => {\n          const isFirstWeek = weekGrid === 0\n          const realDayIndex = emptyDays - dayIndex\n          const beforeWeekDay = isFirstWeek && realDayIndex > 0\n          const dayOfMonth = weekGrid * 7 + dayIndex - emptyDays + 1\n          const afterWeekDay = dayOfMonth > daysInMonth\n\n          const day = new Date(year, month, dayOfMonth)\n          const isToday = areDatesOnSameDay(day, today)\n\n          let inRange = false\n          let disabled = false\n          let selected = false\n          let leftCrop = dayOfMonth === 1\n          let rightCrop = dayOfMonth === daysInMonth\n\n          const isFirstDayOfMonth = dayOfMonth === 1\n          const isLastDayOfMonth = dayOfMonth === daysInMonth\n          if (mode === 'range') {\n            const selectedStartDay = areDatesOnSameDay(day, startDate)\n            const selectedEndDay = areDatesOnSameDay(day, endDate)\n            selected = selectedStartDay || selectedEndDay\n            inRange = isDateBetween(day, {\n              startDate,\n              endDate,\n            })\n            if (selectedStartDay) {\n              leftCrop = true\n            }\n            if (selectedEndDay) {\n              rightCrop = true\n            }\n            if (dayIndex === 0 && !selectedStartDay) {\n              leftCrop = false\n            }\n\n            if (dayIndex === 6 && !selectedEndDay) {\n              rightCrop = false\n            }\n\n            if (\n              (isFirstDayOfMonth && selectedEndDay) ||\n              (isLastDayOfMonth && selectedStartDay)\n            ) {\n              inRange = false\n            }\n          } else if (mode === 'multiple') {\n            const safeDates = dates || []\n            selected = safeDates.some((d) => areDatesOnSameDay(day, d))\n\n            const yesterday = new Date(year, month, dayOfMonth - 1)\n            const tomorrow = new Date(year, month, dayOfMonth + 1)\n\n            const yesterdaySelected = safeDates.some((d) =>\n              areDatesOnSameDay(d, yesterday)\n            )\n            const tomorrowSelected = safeDates.some((d) =>\n              areDatesOnSameDay(d, tomorrow)\n            )\n\n            if (selected) {\n              if (tomorrowSelected && yesterdaySelected) {\n                inRange = true\n              }\n              if (tomorrowSelected && !yesterdaySelected) {\n                inRange = true\n                leftCrop = true\n              }\n\n              if (yesterdaySelected && !tomorrowSelected) {\n                inRange = true\n                rightCrop = true\n              }\n\n              if (isFirstDayOfMonth && !tomorrowSelected) {\n                inRange = false\n              }\n\n              if (isLastDayOfMonth && !yesterdaySelected) {\n                inRange = false\n              }\n\n              if (inRange && !leftCrop && !rightCrop) {\n                selected = false\n              }\n            }\n\n            //\n          } else if (mode === 'single') {\n            selected = areDatesOnSameDay(day, date)\n          }\n          //\n          const isWithinOptionalValidRange = isDateWithinOptionalRange(day, {\n            startUnix: validRangeStart,\n            endUnix: validRangeEnd,\n          })\n\n          if (inRange) {\n            disabled = false\n          }\n\n          if (!isWithinOptionalValidRange) {\n            disabled = true\n          }\n\n          return {\n            beforeWeekDay,\n            afterWeekDay,\n            year,\n            month,\n            dayOfMonth,\n            dayIndex,\n            mode,\n            selected,\n            inRange,\n            leftCrop,\n            rightCrop,\n            isToday,\n            disabled,\n          }\n        }),\n      }\n    })\n  }, [\n    year,\n    month,\n    index,\n    startDate,\n    endDate,\n    date,\n    dates,\n    validRangeStart,\n    validRangeEnd,\n    mode,\n  ])\n\n  return (\n    <View style={[styles.month, { height: getMonthHeight(scrollMode, index) }]}>\n      <View\n        style={[\n          styles.monthHeader,\n          isHorizontal\n            ? {\n                marginTop: monthHeaderSingleMarginTop,\n                marginBottom: monthHeaderSingleMarginBottom,\n              }\n            : null,\n        ]}\n      >\n        <TouchableRipple\n          disabled={!isHorizontal}\n          onPress={isHorizontal ? () => onPressYear(year) : undefined}\n          style={[\n            styles.yearButton,\n            {\n              borderRadius: roundness,\n            },\n          ]}\n        >\n          <View\n            style={[\n              styles.yearButtonInner,\n              {\n                borderRadius: roundness,\n              },\n            ]}\n          >\n            <Text\n              style={[styles.monthLabel, theme.fonts.medium]}\n              selectable={false}\n            >\n              {monthName} {year}\n            </Text>\n            <View style={isHorizontal ? styles.opacity1 : styles.opacity0}>\n              <IconButton\n                onPress={isHorizontal ? () => onPressYear(year) : undefined}\n                icon={selectingYear ? 'chevron-up' : 'chevron-down'}\n              />\n            </View>\n          </View>\n        </TouchableRipple>\n      </View>\n\n      {grid.map(({ weekIndex, generatedDays }) => (\n        <View style={styles.week} key={weekIndex}>\n          {generatedDays\n            .filter((gd) => showWeekDay(gd.dayIndex, disableWeekDays))\n            .map((gd) =>\n              gd.beforeWeekDay || gd.afterWeekDay ? (\n                <EmptyDay key={gd.dayIndex} />\n              ) : (\n                <Day\n                  key={gd.dayIndex}\n                  theme={theme}\n                  day={gd.dayOfMonth}\n                  month={gd.month}\n                  year={gd.year}\n                  selected={gd.selected}\n                  inRange={gd.inRange}\n                  leftCrop={gd.leftCrop}\n                  rightCrop={gd.rightCrop}\n                  onPressDate={onPressDate}\n                  isToday={gd.isToday}\n                  selectColor={selectColor}\n                  primaryColor={primaryColor}\n                  disabled={gd.disabled}\n                  textColorOnPrimary={textColorOnPrimary}\n                />\n              )\n            )}\n        </View>\n      ))}\n    </View>\n  )\n}\n\nexport const weekMargin = 6\nexport const weekSize = daySize + weekMargin\nexport const montHeaderHeight = 56\nexport const monthHeaderSingleMarginTop = 4\nexport const monthHeaderSingleMarginBottom = 8 + 44 + 12\nexport const monthHeaderSingleHeight =\n  monthHeaderSingleMarginTop + monthHeaderSingleMarginBottom\n\nconst styles = StyleSheet.create({\n  week: {\n    flexDirection: 'row',\n    marginBottom: weekMargin,\n    height: daySize,\n  },\n\n  month: {},\n\n  monthHeader: {\n    height: montHeaderHeight,\n    justifyContent: 'center',\n    overflow: 'hidden',\n  },\n  monthLabel: { fontSize: 14, opacity: 0.7 },\n  yearButton: { alignSelf: 'flex-start', marginLeft: 6 },\n  yearButtonInner: {\n    paddingLeft: 16,\n    flexDirection: 'row',\n    alignItems: 'center',\n  },\n  opacity0: { opacity: 0 },\n  opacity1: { opacity: 1 },\n})\n\nconst monthGrid = (index: number) => {\n  return Array(getGridCount(index))\n    .fill(null)\n    .map((_, weekGrid) => {\n      const days = Array(7).fill(null)\n      return { weekGrid, days }\n    })\n}\n\nfunction getIndexCount(index: number): number {\n  if (index > startAtIndex) {\n    return index - startAtIndex\n  }\n\n  return -(startAtIndex - index)\n}\n\nfunction weeksOffset(index: number): number {\n  if (index === startAtIndex) {\n    return 0\n  }\n  let off = 0\n  if (index > startAtIndex) {\n    for (let i = 0; i < index - startAtIndex; i++) {\n      const cIndex = startAtIndex + i\n      off += gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  } else {\n    for (let i = 0; i < startAtIndex - index; i++) {\n      const cIndex = startAtIndex - i - 1\n      off -= gridCounts[cIndex] || getGridCount(cIndex)\n    }\n  }\n  return off\n}\n\nexport function getIndexFromHorizontalOffset(\n  offset: number,\n  width: number\n): number {\n  return startAtIndex + Math.floor(offset / width)\n}\n\nexport function getIndexFromVerticalOffset(offset: number): number {\n  let estimatedIndex = startAtIndex + Math.ceil(offset / estimatedMonthHeight)\n\n  const realOffset = getVerticalMonthsOffset(estimatedIndex)\n  const difference = (realOffset - beginOffset - offset) / estimatedMonthHeight\n  if (difference >= 1 || difference <= -1) {\n    estimatedIndex -= Math.floor(difference)\n  }\n  return estimatedIndex\n}\n\nexport function getHorizontalMonthOffset(index: number, width: number) {\n  if (index < 0) {\n    return 0\n  }\n  return width * index\n}\n\nexport function getVerticalMonthsOffset(index: number) {\n  const count = getIndexCount(index)\n  const ob = weeksOffset(index)\n  const monthsHeight = weekSize * ob\n  const c = monthsHeight + count * (dayNamesHeight + montHeaderHeight)\n\n  return (c || 0) + beginOffset\n}\n\nexport function getMonthHeight(\n  scrollMode: 'horizontal' | 'vertical',\n  index: number\n): number {\n  const calendarHeight = getCalendarHeaderHeight(scrollMode)\n  const gc = getGridCount(index)\n\n  const currentMonthHeight = weekSize * gc\n  const extraHeight =\n    scrollMode === 'horizontal' ? monthHeaderSingleHeight : montHeaderHeight\n  const c = calendarHeight + currentMonthHeight + extraHeight\n  return c || 0\n}\n\nexport default React.memo(Month)\n"]}