"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.showWeekDay = showWeekDay;
exports.dateToUnix = dateToUnix;
exports.addMonths = addMonths;
exports.getDaysInMonth = getDaysInMonth;
exports.getFirstDayOfMonth = getFirstDayOfMonth;
exports.areDatesOnSameDay = areDatesOnSameDay;
exports.isDateBetween = isDateBetween;
exports.isDateWithinOptionalRange = isDateWithinOptionalRange;
exports.isLeapYear = isLeapYear;
exports.getGridCount = getGridCount;
exports.getGridCountForDate = getGridCountForDate;
exports.getRealIndex = getRealIndex;
exports.getInitialIndex = getInitialIndex;
exports.differenceInMonths = differenceInMonths;
exports.gridCounts = exports.beginOffset = exports.totalMonths = exports.startAtIndex = exports.estimatedMonthHeight = exports.daySize = void 0;

function showWeekDay(dayIndex, disableWeekDays) {
  return !(disableWeekDays && disableWeekDays.some(di => di === dayIndex));
}

function dateToUnix(d) {
  return Math.round(d.getTime() / 1000);
}

function addMonths(date, count) {
  let n = date.getDate();
  let n2 = new Date(date.getTime());
  n2.setDate(1);
  n2.setMonth(n2.getMonth() + count);
  n2.setDate(Math.min(n, getDaysInMonth({
    year: n2.getFullYear(),
    month: n2.getMonth()
  })));
  return n2;
} // https://stackoverflow.com/a/1185068/2508481
// pass in any date as parameter anyDateInMonth based on dayjs


function getDaysInMonth({
  year,
  month
}) {
  return [31, isLeapYear({
    year
  }) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];
}

function getFirstDayOfMonth({
  year,
  month
}) {
  return new Date(year, month, 1).getDay();
} // export function getLastDayOfMonth({
//   year,
//   month,
// }: {
//   year: number
//   month: number
// }): number {
//   return new Date(year, month, getDaysInMonth({ year, month })).getDay()
// }


function areDatesOnSameDay(a, b) {
  if (!b) {
    return false;
  }

  return a.getFullYear() === b.getFullYear() && a.getMonth() === b.getMonth() && a.getDate() === b.getDate();
}

function isDateBetween(date, {
  startDate,
  endDate
}) {
  if (!startDate || !endDate) {
    return false;
  }

  return date <= endDate && date >= startDate;
}
/**
 * Check if a date is within an optional range.
 *
 * If the range doesn't exist, it defaults to `true`.
 */


function isDateWithinOptionalRange(date, {
  startUnix,
  endUnix
}) {
  const dateUnix = dateToUnix(date); // if startUnix is provided and date is before start

  if (startUnix && dateUnix < startUnix) {
    return false;
  } // if endUnix is provided and date is after end


  if (endUnix && dateUnix > endUnix) {
    return false;
  }

  return true;
}

function isLeapYear({
  year
}) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}

const daySize = 46;
exports.daySize = daySize;
const estimatedMonthHeight = 360;
exports.estimatedMonthHeight = estimatedMonthHeight;
const startAtIndex = 1200;
exports.startAtIndex = startAtIndex;
const totalMonths = startAtIndex * 2;
exports.totalMonths = totalMonths;
const beginOffset = estimatedMonthHeight * startAtIndex;
exports.beginOffset = beginOffset;
const gridCounts = new Array(totalMonths);
exports.gridCounts = gridCounts;

function getGridCount(index) {
  const cHeight = gridCounts[index];

  if (cHeight) {
    return cHeight;
  }

  const monthDate = addMonths(new Date(), getRealIndex(index));
  const h = getGridCountForDate(monthDate);
  gridCounts[index] = h;
  return h;
}

function getGridCountForDate(date) {
  const year = date.getFullYear();
  const month = date.getMonth();
  const daysInMonth = getDaysInMonth({
    year,
    month
  });
  const dayOfWeek = getFirstDayOfMonth({
    year,
    month
  });
  return Math.ceil((daysInMonth + dayOfWeek) / 7);
}

function getRealIndex(index) {
  return index - startAtIndex;
}

function getInitialIndex(date) {
  if (!date) {
    return startAtIndex;
  }

  const today = new Date();
  const months = differenceInMonths(today, date);
  return startAtIndex + months;
}

function differenceInMonths(firstDate, secondDate) {
  let diffMonths = (secondDate.getFullYear() - firstDate.getFullYear()) * 12;
  diffMonths -= firstDate.getMonth();
  diffMonths += secondDate.getMonth();
  return diffMonths;
}
//# sourceMappingURL=dateUtils.js.map