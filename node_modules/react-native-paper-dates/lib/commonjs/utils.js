"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useLatest = useLatest;
exports.useHeaderBackgroundColor = useHeaderBackgroundColor;
exports.useHeaderColorIsLight = useHeaderColorIsLight;
exports.useHeaderTextColor = useHeaderTextColor;
exports.useTextColorOnPrimary = useTextColorOnPrimary;
exports.range = range;

var React = _interopRequireWildcard(require("react"));

var _reactNativePaper = require("react-native-paper");

var _color = _interopRequireDefault(require("color"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useLatest(value) {
  const valueRef = React.useRef(value);
  React.useEffect(() => {
    valueRef.current = value;
  }, [value]);
  return valueRef;
}

function useHeaderBackgroundColor() {
  const theme = (0, _reactNativePaper.useTheme)();
  return theme.dark && theme.mode === 'adaptive' ? (0, _reactNativePaper.overlay)(4, theme.colors.surface) : theme.colors.primary;
}

function useHeaderColorIsLight() {
  const theme = (0, _reactNativePaper.useTheme)();
  const background = theme.dark && theme.mode === 'adaptive' ? theme.colors.surface : theme.colors.primary;
  return (0, _color.default)(background).isLight();
}

function useHeaderTextColor() {
  const isLight = useHeaderColorIsLight();
  return !isLight ? '#fff' : '#000';
}

function useTextColorOnPrimary() {
  const theme = (0, _reactNativePaper.useTheme)();
  const isDark = !(0, _color.default)(theme.colors.primary).isLight();
  return isDark ? '#fff' : '#000';
}

function range(start, end) {
  return Array(end - start + 1).fill(null).map((_, i) => start + i);
}
//# sourceMappingURL=utils.js.map